<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sharperM</title>
    <link>https://sharperM.GitHub.io/zh-cn/posts/</link>
    <description>Recent content in Posts on sharperM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 05 Aug 2023 10:25:31 +0800</lastBuildDate><atom:link href="https://sharperM.GitHub.io/zh-cn/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qnap威联通部署gitlab</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/08/05/qnap%E5%A8%81%E8%81%94%E9%80%9A%E9%83%A8%E7%BD%B2gitlab/</link>
      <pubDate>Sat, 05 Aug 2023 10:25:31 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/08/05/qnap%E5%A8%81%E8%81%94%E9%80%9A%E9%83%A8%E7%BD%B2gitlab/</guid>
      <description>前言 没有选择在container station 搜索gitlab的镜像， 因为版本太旧有不安全的问题，所以选择了通过docker命令安装。 0.准备工作 1.安</description>
    </item>
    
    <item>
      <title>cs193p-2021-lecture1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture1/</link>
      <pubDate>Sat, 03 Jun 2023 23:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture1/</guid>
      <description>1.Getting start with swiftUI 1.intro 2.Memorize! 3.xcode 介绍 SwiftUI View var some View 像lego 各个View 组合，嵌套，组成UI 使用函数式编程 ZStack 组合各种view</description>
    </item>
    
    <item>
      <title>cs193p-2021-lecture2</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture2/</link>
      <pubDate>Sat, 03 Jun 2023 23:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture2/</guid>
      <description>cs193p-2021-lecture2 继续写界面 HStack</description>
    </item>
    
    <item>
      <title>金科工作回顾</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/23/%E9%87%91%E7%A7%91%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Thu, 23 Mar 2023 10:46:58 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/23/%E9%87%91%E7%A7%91%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE/</guid>
      <description>金科工作回顾 开始的11月8日 一’修改lua 直译 ts 的脚本错误。 其实就是将lua的定义的静态函数 改成class，改成单例，改成creator的组</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// thread example1.cpp #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;thread&amp;gt; // std::thread void foo() { std::cout &amp;lt;&amp;lt; &amp;#34;foo is called&amp;#34; &amp;lt;&amp;lt; std::endl; } void bar(int x) { std::cout &amp;lt;&amp;lt; &amp;#34;bar is called&amp;#34; &amp;lt;&amp;lt; std::endl; } int main() { std::thread first (foo); // spawn new thread that calls foo() std::thread second (bar,0); // spawn new thread that calls bar(0) std::cout &amp;lt;&amp;lt; &amp;#34;main, foo and bar now execute concurrently...\n&amp;#34;; // synchronize threads: first.join();</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// constructing threads #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;atomic&amp;gt; // std::atomic #include &amp;lt;thread&amp;gt; // std::thread #include &amp;lt;vector&amp;gt; // std::vector std::atomic&amp;lt;int&amp;gt; global_counter (0); void increase_global (int n) { for (int i=0; i&amp;lt;n; ++i) ++global_counter; } void increase_reference (std::atomic&amp;lt;int&amp;gt;&amp;amp; variable, int n) { for (int i=0; i&amp;lt;n; ++i) ++variable; } struct C : std::atomic&amp;lt;int&amp;gt; { C() : std::atomic&amp;lt;int&amp;gt;(0) {} void increase_member (int n) { for (int i=0; i&amp;lt;n; ++i) fetch_add(1); } };</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// example for thread::operator= #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;thread&amp;gt; // std::thread, std::this_thread::sleep_for #include &amp;lt;chrono&amp;gt; // std::chrono::seconds void pause_thread(int n) { std::this_thread::sleep_for (std::chrono::seconds(n)); std::cout &amp;lt;&amp;lt; &amp;#34;pause of &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; seconds ended\n&amp;#34;; } int main() { std::thread threads[5]; // default-constructed threads std::cout &amp;lt;&amp;lt; &amp;#34;Spawning 5 threads...\n&amp;#34;; for (int i=0; i&amp;lt;5; ++i) threads[i] = std::thread(pause_thread,i+1); // move-assign threads std::cout &amp;lt;&amp;lt; &amp;#34;Done spawning threads. Now waiting for them to join:\n&amp;#34;;</description>
    </item>
    
    <item>
      <title>力港1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</link>
      <pubDate>Mon, 06 Mar 2023 20:11:04 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>lua 轉 typescript 錯誤</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</link>
      <pubDate>Mon, 06 Mar 2023 20:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</guid>
      <description>金科工作業務2 lua 轉 typescript 錯誤 整理 1. 數組從1開始 正则表达式 \[([1|2|3|4|5|6|7|8])\] [$1-1] 2. for 循環 //还是是否从1开始 for 3. 三元運算符 value = condition and a or b //當a 等於 0 或者 是 false 的時候</description>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</guid>
      <description>這是一個簡單的筆記。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sharperM.GitHub.io/zh-cn/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/1/01/01/</guid>
      <description>https://segmentfault.com/a/1190000002573302 编程语言 Programming with Objective-C: About Objective-C ： Apple 撰写的一份关于 Objective-C 2.0 的一份文档，这也算是学习 iOS/Mac 开发必读的一份文档，记得我当初看的时候是叫做 The Objective-C Programming Language。 Learn Objective-C</description>
    </item>
    
  </channel>
</rss>
