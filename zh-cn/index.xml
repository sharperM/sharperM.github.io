<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sharperM</title>
    <link>https://sharperM.GitHub.io/zh-cn/</link>
    <description>Recent content on sharperM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 03 Jun 2023 23:10:57 +0800</lastBuildDate>
    
    <atom:link href="https://sharperM.GitHub.io/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>關於</title>
      <link>https://sharperM.GitHub.io/zh-cn/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/about/</guid>
      <description>Hugo 是個靜態網頁產生器。 它利用了一些開放原始碼的專案像是： Cobra Viper J Walter Weatherman Cast 了解並貢獻： GitHub.</description>
      <content:encoded><![CDATA[<p>Hugo 是個靜態網頁產生器。</p>
<p>它利用了一些開放原始碼的專案像是：</p>
<ul>
<li><a href="https://github.com/spf13/cobra">Cobra</a></li>
<li><a href="https://github.com/spf13/viper">Viper</a></li>
<li><a href="https://github.com/spf13/jWalterWeatherman">J Walter Weatherman</a></li>
<li><a href="https://github.com/spf13/cast">Cast</a></li>
</ul>
<p>了解並貢獻： <a href="https://github.com/gohugoio">GitHub</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>cs193p-2021-lecture1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture1/</link>
      <pubDate>Sat, 03 Jun 2023 23:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture1/</guid>
      <description>1.Getting start with swiftUI 1.intro 2.Memorize! 3.xcode 介绍 SwiftUI View var some View 像lego 各个View 组合，嵌套，组成UI 使用函数式编程 ZStack 组合各种view</description>
      <content:encoded><![CDATA[<h1 id="1getting-start-with-swiftui">1.Getting start with swiftUI</h1>
<h2 id="1intro">1.intro</h2>
<h2 id="2memorize">2.Memorize!</h2>
<h2 id="3xcode">3.xcode</h2>
<pre><code>介绍 SwiftUI

View

var 

some View

像lego 各个View 组合，嵌套，组成UI

使用函数式编程

ZStack 组合各种view
</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>cs193p-2021-lecture2</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture2/</link>
      <pubDate>Sat, 03 Jun 2023 23:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/06/03/cs193p-2021-lecture2/</guid>
      <description>cs193p-2021-lecture2 继续写界面 HStack</description>
      <content:encoded><![CDATA[<p>cs193p-2021-lecture2</p>
<p>继续写界面</p>
<p>HStack</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>金科工作回顾</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/23/%E9%87%91%E7%A7%91%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Thu, 23 Mar 2023 10:46:58 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/23/%E9%87%91%E7%A7%91%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE/</guid>
      <description>金科工作回顾 开始的11月8日 一’修改lua 直译 ts 的脚本错误。 其实就是将lua的定义的静态函数 改成class，改成单例，改成creator的组</description>
      <content:encoded><![CDATA[<p>金科工作回顾</p>
<p>开始的11月8日</p>
<h2 id="一修改lua-直译-ts-的脚本错误">一’修改lua 直译 ts 的脚本错误。</h2>
<p>其实就是将lua的定义的静态函数</p>
<p>改成class，改成单例，改成creator的组件</p>
<p>lua的内置函数改成 ts，js的实现</p>
<pre><code>例如
math，random，string, table, ipairs, pair, concat, clone,
</code></pre>
<p>lua的table从1开始索引的。</p>
<pre><code>a = b || c ，
a = b &amp;&amp; c || d，
random(n) 返回是 [1,n]的随机数
</code></pre>
<p>原本的cocos2dx-lua 3.17 的成员</p>
<p>不同的回调函数</p>
<pre><code>onEnter
onEnterFinsh
onExit
</code></pre>
<p>例如sprite， node， lable， widget， layer，</p>
<p>写一个适配层 wrap 来 转成，  creator 的 组件。</p>
<p>这里要解决的是
2dx 的 绘制顺序，2d游戏的遮挡，和 creator 的绘制顺序不一样。</p>
<p>还有canva 的坐标，会代替 cocos2dx的屏幕坐标问题。</p>
<p>函数接口实现</p>
<p>UI类和ui组件的差异，</p>
<p>还有一些ui组件自带的缓动效果（例如scrolliew的回弹效果，就不能对intercontainer 做位置相关的缓动，会冲突）。</p>
<h2 id="资源加载引起的异步问题">资源加载引起的异步问题</h2>
<p>要处理通过程序代码动态创建的界面需要获得图片的尺寸才能设置位置。这个是应该避免的，应该每一个图片都是固定“显示大小“，图片资源加载之后才根据实际大小缩放到“显示大小“，避免等待图片加载的情况。</p>
<h2 id="播放动画引起的异步">播放动画引起的异步</h2>
<p>还有一些，spine动画加载，然后在播放动画之后，执行回调的，回调的应该是管理类，不能是界面。避免动画的播放的过程中，回调涉及的界面已经被销毁。其中也是涉及到如何分离 逻辑和界面的问题，因为最终管理类可能也是要影响界面的。</p>
<p>建议是通过消息队列，设计一个安全的消息分发类
（弱引用）</p>
<p>网络消息引起的异步问题，也是和上面的类似</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// thread example1.cpp #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;thread&amp;gt; // std::thread void foo() { std::cout &amp;lt;&amp;lt; &amp;#34;foo is called&amp;#34; &amp;lt;&amp;lt; std::endl; } void bar(int x) { std::cout &amp;lt;&amp;lt; &amp;#34;bar is called&amp;#34; &amp;lt;&amp;lt; std::endl; } int main() { std::thread first (foo); // spawn new thread that calls foo() std::thread second (bar,0); // spawn new thread that calls bar(0) std::cout &amp;lt;&amp;lt; &amp;#34;main, foo and bar now execute concurrently...\n&amp;#34;; // synchronize threads: first.join();</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;display:grid;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// thread example1.cpp
</span></span></span><span style="display:flex; background-color:#3c3d38"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span>  <span style="color:#75715e">&lt;iostream&gt;        // std::cout</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span>  <span style="color:#75715e">&lt;thread&gt;        // std::thread</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">foo</span>()  {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;foo is called&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bar</span>(<span style="color:#66d9ef">int</span> x) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;bar is called&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> first (foo);    <span style="color:#75715e">// spawn new thread that calls foo()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> second (bar,<span style="color:#ae81ff">0</span>);  <span style="color:#75715e">// spawn new thread that calls bar(0)                                                 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;main, foo and bar now execute concurrently...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// synchronize threads:
</span></span></span><span style="display:flex; background-color:#3c3d38"><span><span style="color:#75715e"></span>    first.join();                <span style="color:#75715e">// pauses until first finishes
</span></span></span><span style="display:flex; background-color:#3c3d38"><span><span style="color:#75715e"></span>    second.join();              <span style="color:#75715e">// pauses until second finishes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;foo and bar completed.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>使用下面的命令编译</p>
<pre><code>g++ -std=c++11 example1.cpp -lpthread -o example1                                
</code></pre>
<p>运行输出</p>
<pre><code>foo is called
bar is called
main, foo and bar now execute concurrently...
foo and bar completed.
</code></pre>
<p>或者</p>
<pre><code>main, foo and bar now execute concurrently...
bar is called
foo is called
foo and bar completed.
</code></pre>
<p>只有 join之后的代码顺序是确保的</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc?autoplay=1" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// constructing threads #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;atomic&amp;gt; // std::atomic #include &amp;lt;thread&amp;gt; // std::thread #include &amp;lt;vector&amp;gt; // std::vector std::atomic&amp;lt;int&amp;gt; global_counter (0); void increase_global (int n) { for (int i=0; i&amp;lt;n; ++i) ++global_counter; } void increase_reference (std::atomic&amp;lt;int&amp;gt;&amp;amp; variable, int n) { for (int i=0; i&amp;lt;n; ++i) ++variable; } struct C : std::atomic&amp;lt;int&amp;gt; { C() : std::atomic&amp;lt;int&amp;gt;(0) {} void increase_member (int n) { for (int i=0; i&amp;lt;n; ++i) fetch_add(1); } };</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;display:grid;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>
</span></span><span style="display:flex; background-color:#3c3d38"><span><span style="color:#75715e">// constructing threads
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;       // std::cout</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;atomic&gt;         // std::atomic</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;thread&gt;         // std::thread</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;         // std::vector</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> global_counter (<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increase_global</span> (<span style="color:#66d9ef">int</span> n) { <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>n; <span style="color:#f92672">++</span>i) <span style="color:#f92672">++</span>global_counter; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increase_reference</span> (std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;&amp;</span> variable, <span style="color:#66d9ef">int</span> n) { <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;   i<span style="color:#f92672">&lt;</span>n; <span style="color:#f92672">++</span>i) <span style="color:#f92672">++</span>variable; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">C</span> <span style="color:#f92672">:</span> std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  C() <span style="color:#f92672">:</span> std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">0</span>) {}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increase_member</span> (<span style="color:#66d9ef">int</span> n) { <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>n; <span style="color:#f92672">++</span>i) fetch_add(<span style="color:#ae81ff">1</span>); }
</span></span><span style="display:flex; background-color:#3c3d38"><span>};
</span></span><span style="display:flex; background-color:#3c3d38"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> ()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span><span style="color:#f92672">&gt;</span> threads;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;increase global counter with 10 threads...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>; i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>    threads.push_back(std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span>(increase_global,<span style="color:#ae81ff">1000</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;increase counter (foo) with 10 threads using   reference...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> foo(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>; i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>      threads.push_back(std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span>(increase_reference,std<span style="color:#f92672">::</span>ref(foo),<span style="color:#ae81ff">1000</span>));  
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;increase counter (bar) with 10 threads using member...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  C bar;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>; i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//threads.push_back(std::thread(&amp;C::increase_member,std::ref(bar) ,1000));  //原来语法有错误
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	  threads.push_back(std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span>([<span style="color:#f92672">&amp;</span>bar](){bar.increase_member(<span style="color:#ae81ff">1000</span>);}));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;synchronizing all threads...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> th : threads) th.join();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;global_counter: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> global_counter <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;foo: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> foo <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;bar: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> bar <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>运行输出</p>
<pre><code>increase global counter with 10 threads...
increase counter (foo) with 10 threads using   reference...
increase counter (bar) with 10 threads using member...
synchronizing all threads...
global_counter: 10000
foo: 10000
bar: 10000
</code></pre>
<p>原子值std::atomic</p>
<p>join</p>
<p>同步synchronizing</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// example for thread::operator= #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;thread&amp;gt; // std::thread, std::this_thread::sleep_for #include &amp;lt;chrono&amp;gt; // std::chrono::seconds void pause_thread(int n) { std::this_thread::sleep_for (std::chrono::seconds(n)); std::cout &amp;lt;&amp;lt; &amp;#34;pause of &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; seconds ended\n&amp;#34;; } int main() { std::thread threads[5]; // default-constructed threads std::cout &amp;lt;&amp;lt; &amp;#34;Spawning 5 threads...\n&amp;#34;; for (int i=0; i&amp;lt;5; ++i) threads[i] = std::thread(pause_thread,i+1); // move-assign threads std::cout &amp;lt;&amp;lt; &amp;#34;Done spawning threads. Now waiting for them to join:\n&amp;#34;;</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// example for thread::operator=
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;       // std::cout</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;thread&gt;         // std::thread, std::this_thread::sleep_for</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;chrono&gt;         // std::chrono::seconds</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">pause_thread</span>(<span style="color:#66d9ef">int</span> n) 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>this_thread<span style="color:#f92672">::</span>sleep_for (std<span style="color:#f92672">::</span>chrono<span style="color:#f92672">::</span>seconds(n));
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;pause of &#34;</span> <span style="color:#f92672">&lt;&lt;</span> n <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; seconds ended</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> threads[<span style="color:#ae81ff">5</span>];                         <span style="color:#75715e">// default-constructed threads
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Spawning 5 threads...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>    threads[i] <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span>(pause_thread,i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);   <span style="color:#75715e">// move-assign threads
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Done spawning threads. Now waiting for them to join:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span>i<span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; joined!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    threads[i].join();
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span>i<span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; joined!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;All threads joined!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>运行结果</p>
<pre><code>Spawning 5 threads...
Done spawning threads. Now waiting for them to join:
0 joined!
pause of 1 seconds ended
0 joined!
1 joined!
pause of 2 seconds ended
1 joined!
2 joined!
pause of 3 seconds ended
2 joined!
3 joined!
pause of 4 seconds ended
3 joined!
4 joined!
pause of 5 seconds ended
4 joined!
All threads joined!
</code></pre>
<p>join是阻塞的</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>力港1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</link>
      <pubDate>Mon, 06 Mar 2023 20:11:04 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>lua 轉 typescript 錯誤</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</link>
      <pubDate>Mon, 06 Mar 2023 20:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</guid>
      <description>金科工作業務2 lua 轉 typescript 錯誤 整理 1. 數組從1開始 正则表达式 \[([1|2|3|4|5|6|7|8])\] [$1-1] 2. for 循環 //还是是否从1开始 for 3. 三元運算符 value = condition and a or b //當a 等於 0 或者 是 false 的時候</description>
      <content:encoded><![CDATA[<pre><code>金科工作業務2
</code></pre>
<h1 id="lua-轉-typescript-錯誤-整理">lua 轉 typescript 錯誤 整理</h1>
<hr>
<h2 id="1-數組從1開始">1. 數組從1開始</h2>
<pre><code>正则表达式

\[([1|2|3|4|5|6|7|8])\]

[$1-1]
</code></pre>
<h2 id="2-for-循環">2. for 循環</h2>
<pre><code>//还是是否从1开始
for 
</code></pre>
<h2 id="3-三元運算符">3. 三元運算符</h2>
<pre><code>value = condition and a or b
//當a 等於 0 或者 是 false 的時候 value 不会赋值成 0 或 false
//要改成 
value = condition ? a : b

//类似的
value = a or b
//改成
value = a != undefined ? a : b
</code></pre>
<p>正则查找替换</p>
<pre><code>(.*?)&amp;&amp;(.*?)\|\|(.*)

$1?$2:$3

(.*?)\|\|(.*)
</code></pre>
<h2 id="4-mathrandomx">4. math.random(x)</h2>
<pre><code>x是整數，返回的 是 [1,x]的整數
</code></pre>
<h2 id="5-stringformat">5. string.format</h2>
<pre><code>是類似c的實現，而typescript不是
</code></pre>
<h2 id="6-cc_2dxlabel字体换行">6. cc_2dx.Label字体换行</h2>
<pre><code>t_label.label.overflow = Label.Overflow.RESIZE_HEIGHT
t_label.label.updateRenderData(true)</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>