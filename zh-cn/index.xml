<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sharperM</title>
    <link>https://sharperM.GitHub.io/zh-cn/</link>
    <description>Recent content on sharperM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Mar 2023 23:02:32 +0800</lastBuildDate>
    
    <atom:link href="https://sharperM.GitHub.io/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>關於</title>
      <link>https://sharperM.GitHub.io/zh-cn/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/about/</guid>
      <description>Hugo 是個靜態網頁產生器。 它利用了一些開放原始碼的專案像是： Cobra Viper J Walter Weatherman Cast 了解並貢獻： GitHub.</description>
      <content:encoded><![CDATA[<p>Hugo 是個靜態網頁產生器。</p>
<p>它利用了一些開放原始碼的專案像是：</p>
<ul>
<li><a href="https://github.com/spf13/cobra">Cobra</a></li>
<li><a href="https://github.com/spf13/viper">Viper</a></li>
<li><a href="https://github.com/spf13/jWalterWeatherman">J Walter Weatherman</a></li>
<li><a href="https://github.com/spf13/cast">Cast</a></li>
</ul>
<p>了解並貢獻： <a href="https://github.com/gohugoio">GitHub</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的线程  join()函数</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Mar 2023 23:02:32 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/07/c-11-%E7%9A%84%E7%BA%BF%E7%A8%8B-join%E5%87%BD%E6%95%B0/</guid>
      <description>// thread example1.cpp #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;thread&amp;gt; // std::thread void foo() { std::cout &amp;lt;&amp;lt; &amp;#34;foo is called&amp;#34; &amp;lt;&amp;lt; std::endl; } void bar(int x) { std::cout &amp;lt;&amp;lt; &amp;#34;bar is called&amp;#34; &amp;lt;&amp;lt; std::endl; } int main() { std::thread first (foo); // spawn new thread that calls foo() std::thread second (bar,0); // spawn new thread that calls bar(0) std::cout &amp;lt;&amp;lt; &amp;#34;main, foo and bar now execute concurrently...\n&amp;#34;; // synchronize threads: first.join();</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// thread example1.cpp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span>  <span style="color:#75715e">&lt;iostream&gt;        // std::cout</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span>  <span style="color:#75715e">&lt;thread&gt;        // std::thread</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">foo</span>()  {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;foo is called&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bar</span>(<span style="color:#66d9ef">int</span> x) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;bar is called&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> first (foo);    <span style="color:#75715e">// spawn new thread that calls foo()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> second (bar,<span style="color:#ae81ff">0</span>);  <span style="color:#75715e">// spawn new thread that calls bar(0)                                                 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;main, foo and bar now execute concurrently...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// synchronize threads:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    first.join();                <span style="color:#75715e">// pauses until first finishes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    second.join();              <span style="color:#75715e">// pauses until second finishes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;foo and bar completed.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>使用下面的命令编译</p>
<pre><code>g++ -std=c++11 example1.cpp -lpthread -o example1                                
</code></pre>
<p>运行输出</p>
<pre><code>foo is called
bar is called
main, foo and bar now execute concurrently...
foo and bar completed.
</code></pre>
<p>或者</p>
<pre><code>main, foo and bar now execute concurrently...
bar is called
foo is called
foo and bar completed.
</code></pre>
<p>只有 join之后的代码顺序是确保的</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc?autoplay=1" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>力港1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</link>
      <pubDate>Mon, 06 Mar 2023 20:11:04 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/%E5%8A%9B%E6%B8%AF1/</guid>
      <description>123123</description>
      <content:encoded><![CDATA[<p>123123</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>lua 轉 typescript 錯誤</title>
      <link>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</link>
      <pubDate>Mon, 06 Mar 2023 20:10:57 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2023/03/06/lua-%E8%BD%89-typescript-%E9%8C%AF%E8%AA%A4/</guid>
      <description>金科工作業務2 lua 轉 typescript 錯誤 整理 1. 數組從1開始 正则表达式 \[([1|2|3|4|5|6|7|8])\] [$1-1] 2. for 循環 //还是是否从1开始 for 3. 三元運算符 value = condition and a or b //當a 等於 0 或者 是 false 的時候</description>
      <content:encoded><![CDATA[<pre><code>金科工作業務2
</code></pre>
<h1 id="lua-轉-typescript-錯誤-整理">lua 轉 typescript 錯誤 整理</h1>
<hr>
<h2 id="1-數組從1開始">1. 數組從1開始</h2>
<pre><code>正则表达式

\[([1|2|3|4|5|6|7|8])\]

[$1-1]
</code></pre>
<h2 id="2-for-循環">2. for 循環</h2>
<pre><code>//还是是否从1开始
for 
</code></pre>
<h2 id="3-三元運算符">3. 三元運算符</h2>
<pre><code>value = condition and a or b
//當a 等於 0 或者 是 false 的時候 value 不会赋值成 0 或 false
//要改成 
value = condition ? a : b

//类似的
value = a or b
//改成
value = a != undefined ? a : b
</code></pre>
<p>正则查找替换</p>
<pre><code>(.*?)&amp;&amp;(.*?)\|\|(.*)

$1?$2:$3

(.*?)\|\|(.*)
</code></pre>
<h2 id="4-mathrandomx">4. math.random(x)</h2>
<pre><code>x是整數，返回的 是 [1,x]的整數
</code></pre>
<h2 id="5-stringformat">5. string.format</h2>
<pre><code>是類似c的實現，而typescript不是</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 2</title>
      <link>https://sharperM.GitHub.io/zh-cn/2018/03/04/%E7%AD%86%E8%A8%98-2/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2018/03/04/%E7%AD%86%E8%A8%98-2/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 1</title>
      <link>https://sharperM.GitHub.io/zh-cn/2018/03/03/%E7%AD%86%E8%A8%98-1/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://sharperM.GitHub.io/zh-cn/2018/03/03/%E7%AD%86%E8%A8%98-1/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>